{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EMPTY } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class RegistrationService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.apiUrl = 'https://localhost:7247/registrations'; // replace with your actual API endpoint\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getRegistrations() {\n    return this.http.get(this.apiUrl).pipe(tap(_ => this.log('fetched registrations')), catchError(this.handleError));\n  }\n  getRegistration(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched registration id=${id}`)), catchError(this.handleError));\n  }\n  addRegistration(registration) {\n    return this.http.post(this.apiUrl, JSON.stringify(registration), this.httpOptions).pipe(tap(_ => this.log('added registration')), catchError(this.handleError));\n  }\n  updateRegistration(registration) {\n    const url = `${this.apiUrl}/${registration.registrationId}`;\n    return this.http.put(url, JSON.stringify(registration), this.httpOptions).pipe(tap(_ => this.log(`updated registration id=${registration.registrationId}`)), catchError(this.handleError));\n  }\n  deleteRegistration(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted registration id=${id}`)), catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error) {\n      alert(`An error occurred: ${error.error.detail}`);\n      this.log(`An error occurred: ${error.error.detail}`);\n    }\n    return EMPTY;\n  }\n  log(message) {\n    this.messageService.add(`RegistrationService: ${message}`);\n  }\n}\nRegistrationService.ɵfac = function RegistrationService_Factory(t) {\n  return new (t || RegistrationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nRegistrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegistrationService,\n  factory: RegistrationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAwCA,WAAW,QAAQ,sBAAsB;AACjF,SAASC,KAAK,QAAwB,MAAM;AAC5C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAQhD,OAAM,MAAOC,mBAAmB;EAO9BC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IARhB,WAAM,GAAG,sCAAsC,CAAC,CAAC;IAEzD,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIR,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAI2C;EAE5CS,gBAAgB;IACd,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAiB,IAAI,CAACC,MAAM,CAAC,CAC9CC,IAAI,CACHT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,uBAAuB,CAAC,CAAC,EAC3CZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACL;EAEAC,eAAe,CAACC,EAAU;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACP,MAAM,IAAIM,EAAE,EAAE;IAClC,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAeQ,GAAG,CAAC,CACpCN,IAAI,CACHT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,2BAA2BG,EAAE,EAAE,CAAC,CAAC,EACnDf,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACL;EAEAI,eAAe,CAACC,YAA0B;IACxC,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAe,IAAI,CAACV,MAAM,EAAEW,IAAI,CAACC,SAAS,CAACH,YAAY,CAAC,EAAE,IAAI,CAACI,WAAW,CAAC,CAC7FZ,IAAI,CACHT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,EACxCZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACL;EAEAU,kBAAkB,CAACL,YAA0B;IAC3C,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACP,MAAM,IAAIS,YAAY,CAACM,cAAc,EAAE;IAC3D,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAACT,GAAG,EAAEI,IAAI,CAACC,SAAS,CAACH,YAAY,CAAC,EAAE,IAAI,CAACI,WAAW,CAAC,CACtEZ,IAAI,CACHT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,2BAA2BM,YAAY,CAACM,cAAc,EAAE,CAAC,CAAC,EAC5ExB,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACL;EAEAa,kBAAkB,CAACX,EAAU;IAC3B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACP,MAAM,IAAIM,EAAE,EAAE;IAClC,OAAO,IAAI,CAACX,IAAI,CAACuB,MAAM,CAAeX,GAAG,EAAE,IAAI,CAACM,WAAW,CAAC,CACzDZ,IAAI,CACHT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,2BAA2BG,EAAE,EAAE,CAAC,CAAC,EACnDf,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACe,KAAwB;IAC1C,IAAIA,KAAK,EAAE;MACTC,KAAK,CAAC,sBAAsBD,KAAK,CAACA,KAAK,CAACE,MAAM,EAAE,CAAC;MACjD,IAAI,CAAClB,GAAG,CAAC,sBAAsBgB,KAAK,CAACA,KAAK,CAACE,MAAM,EAAE,CAAC;;IAEtD,OAAO/B,KAAK;EACd;EAEQa,GAAG,CAACmB,OAAe;IACzB,IAAI,CAAC1B,cAAc,CAAC2B,GAAG,CAAC,wBAAwBD,OAAO,EAAE,CAAC;EAC5D;;AAhEW7B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAA+B,SAAnB/B,mBAAmB;EAAAgC,YAFlB;AAAM","names":["HttpHeaders","EMPTY","catchError","tap","RegistrationService","constructor","http","messageService","headers","getRegistrations","get","apiUrl","pipe","_","log","handleError","getRegistration","id","url","addRegistration","registration","post","JSON","stringify","httpOptions","updateRegistration","registrationId","put","deleteRegistration","delete","error","alert","detail","message","add","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Student\\source\\repos\\Assignment_4_Angular_3135520\\src\\app\\services\\registration.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Registration } from '../models/registration.model';\nimport { MessageService } from './message.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationService {\n  private apiUrl = 'https://localhost:7247/registrations'; // replace with your actual API endpoint\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  getRegistrations(): Observable<Registration[]> {\n    return this.http.get<Registration[]>(this.apiUrl)\n      .pipe(\n        tap(_ => this.log('fetched registrations')),\n        catchError(this.handleError)\n      );\n  }\n\n  getRegistration(id: number): Observable<Registration> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get<Registration>(url)\n      .pipe(\n        tap(_ => this.log(`fetched registration id=${id}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  addRegistration(registration: Registration): Observable<Registration> {\n    return this.http.post<Registration>(this.apiUrl, JSON.stringify(registration), this.httpOptions)\n      .pipe(\n        tap(_ => this.log('added registration')),\n        catchError(this.handleError)\n      );\n  }\n\n  updateRegistration(registration: Registration): Observable<any> {\n    const url = `${this.apiUrl}/${registration.registrationId}`;\n    return this.http.put(url, JSON.stringify(registration), this.httpOptions)\n      .pipe(\n        tap(_ => this.log(`updated registration id=${registration.registrationId}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  deleteRegistration(id: number): Observable<Registration> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete<Registration>(url, this.httpOptions)\n      .pipe(\n        tap(_ => this.log(`deleted registration id=${id}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    if (error) {\n      alert(`An error occurred: ${error.error.detail}`);\n      this.log(`An error occurred: ${error.error.detail}`);\n    }\n    return EMPTY;\n  }\n\n  private log(message: string): void {\n    this.messageService.add(`RegistrationService: ${message}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}