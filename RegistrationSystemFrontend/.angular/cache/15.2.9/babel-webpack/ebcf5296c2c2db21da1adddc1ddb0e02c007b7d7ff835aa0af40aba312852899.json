{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EMPTY } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class CourseTypeService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.apiUrl = 'https://localhost:7247/coursetypes'; // replace with your actual API endpoint\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getCourseTypes() {\n    return this.http.get(this.apiUrl).pipe(tap(_ => this.log('fetched coursetypes')), catchError(this.handleError));\n  }\n  getCourseType(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched coursetype id=${id}`)), catchError(this.handleError));\n  }\n  addCourseType(coursetype) {\n    return this.http.post(this.apiUrl, JSON.stringify(coursetype), this.httpOptions).pipe(tap(_ => this.log('added coursetype')), catchError(this.handleError));\n  }\n  updateCourseType(coursetype) {\n    const url = `${this.apiUrl}/${coursetype.courseTypeId}`;\n    return this.http.put(url, JSON.stringify(coursetype), this.httpOptions).pipe(tap(_ => this.log(`updated coursetype id=${coursetype.courseTypeId}`)), catchError(this.handleError));\n  }\n  deleteCourseType(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted coursetype id=${id}`)), catchError(this.handleError));\n  }\n  handleError(error) {\n    this.log(`An error occurred: ${error.message}`);\n    alert(`An error occurred: ${error.message}`);\n    return EMPTY;\n  }\n  log(message) {\n    this.messageService.add(`CourseTypeService: ${message}`);\n  }\n}\nCourseTypeService.ɵfac = function CourseTypeService_Factory(t) {\n  return new (t || CourseTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nCourseTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CourseTypeService,\n  factory: CourseTypeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EMPTY","catchError","tap","CourseTypeService","constructor","http","messageService","headers","getCourseTypes","get","apiUrl","pipe","_","log","handleError","getCourseType","id","url","addCourseType","coursetype","post","JSON","stringify","httpOptions","updateCourseType","courseTypeId","put","deleteCourseType","delete","error","message","alert","add","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Student\\source\\repos\\Assignment_4_Angular_3135520\\src\\app\\services\\course-type.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\nimport { MessageService } from './message.service';\nimport { CourseType } from '../models/course-type.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CourseTypeService {\n  private apiUrl = 'https://localhost:7247/coursetypes'; // replace with your actual API endpoint\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  getCourseTypes(): Observable<CourseType[]> {\n    return this.http.get<CourseType[]>(this.apiUrl)\n      .pipe(\n        tap(_ => this.log('fetched coursetypes')),\n        catchError(this.handleError)\n      );\n  }\n\n  getCourseType(id: number): Observable<CourseType> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get<CourseType>(url)\n      .pipe(\n        tap(_ => this.log(`fetched coursetype id=${id}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  addCourseType(coursetype: CourseType): Observable<CourseType> {\n    return this.http.post<CourseType>(this.apiUrl, JSON.stringify(coursetype), this.httpOptions)\n      .pipe(\n        tap(_ => this.log('added coursetype')),\n        catchError(this.handleError)\n      );\n  }\n\n  updateCourseType(coursetype: CourseType): Observable<any> {\n    const url = `${this.apiUrl}/${coursetype.courseTypeId}`;\n    return this.http.put(url, JSON.stringify(coursetype), this.httpOptions)\n      .pipe(\n        tap(_ => this.log(`updated coursetype id=${coursetype.courseTypeId}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  deleteCourseType(id: number): Observable<CourseType> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete<CourseType>(url, this.httpOptions)\n      .pipe(\n        tap(_ => this.log(`deleted coursetype id=${id}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    this.log(`An error occurred: ${error.message}`);\n    alert(`An error occurred: ${error.message}`);\n    return EMPTY;\n  }\n\n  private log(message: string): void {\n    this.messageService.add(`CourseTypeService: ${message}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}