{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EMPTY } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class CourseService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.apiUrl = 'https://localhost:7247/courses'; // replace with your actual API endpoint\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getCourses() {\n    return this.http.get(this.apiUrl).pipe(tap(_ => this.log('fetched courses')), catchError(this.handleError));\n  }\n  getCourse(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched course id=${id}`)), catchError(this.handleError));\n  }\n  addCourse(course) {\n    return this.http.post(this.apiUrl, JSON.stringify(course), this.httpOptions).pipe(tap(_ => this.log('added course')), catchError(this.handleError));\n  }\n  updateCourse(course) {\n    const url = `${this.apiUrl}/${course.courseId}`;\n    return this.http.put(url, JSON.stringify(course), this.httpOptions).pipe(tap(_ => this.log(`updated course id=${course.courseId}`)), catchError(this.handleError));\n  }\n  deleteCourse(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted course id=${id}`)), catchError(this.handleError));\n  }\n  handleError(error) {\n    this.log(`An error occurred: ${error.message}`);\n    alert(`An error occurred: ${error.message}`);\n    return EMPTY;\n  }\n  log(message) {\n    this.messageService.add(`CourseService: ${message}`);\n  }\n}\nCourseService.ɵfac = function CourseService_Factory(t) {\n  return new (t || CourseService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nCourseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CourseService,\n  factory: CourseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","EMPTY","catchError","tap","CourseService","constructor","http","messageService","headers","getCourses","get","apiUrl","pipe","_","log","handleError","getCourse","id","url","addCourse","course","post","JSON","stringify","httpOptions","updateCourse","courseId","put","deleteCourse","delete","error","message","alert","add","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Student\\source\\repos\\Assignment_4_Angular_3135520\\src\\app\\services\\course.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Course } from '../models/course.model';\nimport { MessageService } from './message.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CourseService {\n  private apiUrl = 'https://localhost:7247/courses'; // replace with your actual API endpoint\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  getCourses(): Observable<Course[]> {\n    return this.http.get<Course[]>(this.apiUrl)\n      .pipe(\n        tap(_ => this.log('fetched courses')),\n        catchError(this.handleError)\n      );\n  }\n\n  getCourse(id: number): Observable<Course> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get<Course>(url)\n      .pipe(\n        tap(_ => this.log(`fetched course id=${id}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  addCourse(course: Course): Observable<Course> {\n    return this.http.post<Course>(this.apiUrl, JSON.stringify(course), this.httpOptions)\n      .pipe(\n        tap(_ => this.log('added course')),\n        catchError(this.handleError)\n      );\n  }\n\n  updateCourse(course: Course): Observable<any> {\n    const url = `${this.apiUrl}/${course.courseId}`;\n    return this.http.put(url, JSON.stringify(course), this.httpOptions)\n      .pipe(\n        tap(_ => this.log(`updated course id=${course.courseId}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  deleteCourse(id: number): Observable<Course> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete<Course>(url, this.httpOptions)\n      .pipe(\n        tap(_ => this.log(`deleted course id=${id}`)),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    this.log(`An error occurred: ${error.message}`);\n    alert(`An error occurred: ${error.message}`);\n    return EMPTY;\n  }\n\n  private log(message: string): void {\n    this.messageService.add(`CourseService: ${message}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}