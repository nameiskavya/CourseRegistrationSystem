{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const expectedRole = route.data['role'];\n    if (this.authService.getUserRole() === expectedRole) {\n      return true;\n    } else {\n      this.router.navigate(['/access-denied']);\n      return false;\n    }\n  }\n}\nRoleGuard.ɵfac = function RoleGuard_Factory(t) {\n  return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nRoleGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RoleGuard,\n  factory: RoleGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,MAAMC,YAAY,GAAGF,KAAK,CAACG,IAAI,CAAC,MAAM,CAAC;IAEvC,IAAI,IAAI,CAACN,WAAW,CAACO,WAAW,EAAE,KAAKF,YAAY,EAAE;MACnD,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;MACxC,OAAO,KAAK;;EAEhB;;AAfWV,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAW,SAATX,SAAS;EAAAY,YAFR;AAAM","names":["RoleGuard","constructor","authService","router","canActivate","route","state","expectedRole","data","getUserRole","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Student\\source\\repos\\Assignment_4_Angular_3135520\\src\\app\\guards\\role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const expectedRole = route.data['role'];\n\n    if (this.authService.getUserRole() === expectedRole) {\n      return true;\n    } else {\n      this.router.navigate(['/access-denied']);\n      return false;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}